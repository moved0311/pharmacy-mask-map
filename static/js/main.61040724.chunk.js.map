{"version":3,"sources":["Taiwanmap.js","App.js","serviceWorker.js","index.js"],"names":["Taiwanmap","props","state","map","data","loaded","options","inputValue","makersArr","clickhandler","bind","L","window","Map","setView","layer","tileLayer","attribution","addLayer","this","setState","loadData","xhr","XMLHttpRequest","self","open","onreadystatechange","readyState","status","JSON","parse","response","send","csv","lines","split","result","headers","i","length","obj","currentline","j","push","event","marker","removeLayer","console","log","value","id","className","placeholder","ref","c","onClick","nextProps","prevState","area","allPharmacy","filter","addr","substr","pharmacy","coordiantes","latLng","masknum","Icon","iconUrl","iconSize","icon","popupmsg","bindPopup","Component","ReactGA","initialize","pageview","location","pathname","search","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61040724.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Taiwanmap.css';\n\nexport default class Taiwanmap extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      map:{},\n      data: [],\n      loaded: false,\n      options:[],\n      inputValue : \"\",\n      makersArr: []\n    }\n    this.clickhandler = this.clickhandler.bind(this);\n  }\n\ncomponentDidMount(){\n  let L = window.L;\n  let map = new L.Map('taiwanmap').setView([23.79037129915711, 120.95281938174952], 8);\n  let layer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n  });\n  map.addLayer(layer);\n  this.setState({map: map});\n  \n  this.loadData(); //load (/public/data.csv) to state\n }\n static getDerivedStateFromProps(nextProps, prevState) {\n    let L = window.L;\n    // var makersArr = [];\n  // console.log(prevState.data['features']);\n  let area = [];\n  let allPharmacy = prevState.data['features'];\n\n\n  if(prevState.inputValue.length > 0){\n      if(prevState.inputValue.length > 5){\n           area = allPharmacy.filter(addr =>{\n            return addr['properties']['address'].substr(0,6) === prevState.inputValue;\n          })\n      }else{\n          area = allPharmacy.filter(addr =>{\n            return addr['properties']['address'].substr(3,3) === prevState.inputValue;\n          })\n      }\n      console.log('共' + area.length +'比結果');\n  }\n    if(prevState.loaded){  \n      for(let pharmacy of area){ \n        let coordiantes = pharmacy['geometry']['coordinates'];\n        coordiantes = [coordiantes[1], coordiantes[0]];\n        let marker = new L.marker(new L.latLng(coordiantes));\n        let masknum = pharmacy['properties']['mask_adult'];\n        if( masknum >= 50){\n          marker = new L.marker(new L.latLng(coordiantes));\n        }else if(masknum <= 50 && masknum > 0){\n          let icontype = `https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png`\n          let Icon = new L.Icon({\n            iconUrl: icontype,\n            iconSize: [25, 41]\n          });\n          marker = new L.marker(new L.latLng(coordiantes), {icon: Icon});\n        }else{\n          let icontype = `https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-grey.png`\n          let Icon = new L.Icon({\n            iconUrl: icontype,\n            iconSize: [25, 41]\n          });\n          marker = new L.marker(new L.latLng(coordiantes), {icon: Icon});\n        }\n        let popupmsg = `\n        藥局名稱: ${pharmacy['properties']['name']}<br/>\n        地址: ${pharmacy['properties']['address']}<br/>\n        醫事機構代碼: ${pharmacy['properties']['id']} <br/>\n        電話: ${pharmacy['properties']['phone']}<br/>\n        成人口罩總剩餘數: ${pharmacy['properties']['mask_adult']}<br/>\n        兒童口罩剩餘數: ${pharmacy['properties']['mask_child']}<br/>\n        來源資料時間: ${pharmacy['properties']['updated']}\n        `\n        marker.bindPopup(popupmsg);\n        prevState.map.addLayer(marker);\n        prevState.makersArr.push(marker);\n      }\n    }\n    return null;\n }\n\n  loadData(){\n    const xhr = new XMLHttpRequest();\n    // const url = \"https://raw.githubusercontent.com/moved0311/get-mask-data/master/output.csv\"\n    const url =\"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json?fbclid=IwAR3fyzFIBPOMj1WcDLJaXEYFZQiAlfW9BFYpsSN_sELepbKtdjM4HGgP7NM\"\n    var self = this;\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = function(){\n      if(this.readyState === 4 && this.status === 200){\n        self.setState({\n          data : JSON.parse(this.response),\n          loaded: true\n        });\n      }\n    }\n    xhr.send();\n  }\n  csvJSON(csv){\n    var lines=csv.split(\"\\n\");\n    var result = [];\n    var headers=lines[0].split(\",\");\n    for(var i=1;i<lines.length;i++){\n        var obj = {};\n        var currentline=lines[i].split(\",\");\n        for(var j=0;j<headers.length;j++){\n            obj[headers[j]] = currentline[j];\n        }\n        result.push(obj);\n    }\n    return result; \n  }\n  clickhandler(event){\n    //remove exist marker. \n    for(let marker of this.state.makersArr){\n      this.state.map.removeLayer(marker);\n    }\n\n    console.log('查詢:' + this.inputValue.value);\n    this.setState({inputValue: this.inputValue.value});\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"taiwanmap\"> </div>\n        <div id=\"query\" className=\"leaflet-bar\">\n          <label>\n          鄉鎮別:\n          <input  placeholder=\"台北市大安區 or 大安區\" ref={(c) => this.inputValue = c}></input>\n          <button onClick={this.clickhandler}>查詢</button>\n          </label>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Taiwanmap from './Taiwanmap';\nimport './App.css';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-158033292-1');\nReactGA.pageview(window.location.pathname + window.location.search);\nfunction App() {\n  return (\n    <div id=\"App\" >\n        <Taiwanmap></Taiwanmap>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}