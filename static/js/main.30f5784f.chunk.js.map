{"version":3,"sources":["Taiwanmap.js","App.js","serviceWorker.js","index.js"],"names":["Taiwanmap","props","state","map","data","loaded","options","inputValue","makersArr","clickhandler","bind","L","window","Map","setView","layer","tileLayer","attribution","addLayer","this","setState","loadData","xhr","XMLHttpRequest","self","open","onreadystatechange","readyState","status","csvJSON","response","send","csv","lines","split","result","headers","i","length","obj","currentline","j","push","event","marker","removeLayer","console","log","value","id","className","placeholder","ref","c","onClick","nextProps","prevState","area","filter","d","substr","pharmacy","url","onload","point","JSON","parse","latLng","y","x","popupmsg","bindPopup","Component","ReactGA","initialize","pageview","location","pathname","search","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30f5784f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Taiwanmap.css';\n\nexport default class Taiwanmap extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      map:{},\n      data: [],\n      loaded: false,\n      options:[],\n      inputValue : \"\",\n      makersArr: []\n    }\n    this.clickhandler = this.clickhandler.bind(this);\n  }\n\ncomponentDidMount(){\n  let L = window.L;\n  let map = new L.Map('taiwanmap').setView([23.79037129915711, 120.95281938174952], 8);\n  let layer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n  });\n  map.addLayer(layer);\n  this.setState({map: map});\n  \n  this.loadData(); //load (/public/data.csv) to state\n }\n static getDerivedStateFromProps(nextProps, prevState) {\n    let L = window.L;\n    // var makersArr = [];\n\n  let area = [];\n  if(prevState.inputValue.length > 0){\n      if(prevState.inputValue.length > 5){\n        area = prevState.data.filter(d => {\n          return d['縣市別'] ===  prevState.inputValue.substr(0,3);\n        })\n        area = area.filter(d =>{\n          return d['鄉鎮別'] === prevState.inputValue.substr(3);\n        })\n      }else{\n        area = prevState.data.filter(d =>{\n          return d['鄉鎮別'] === prevState.inputValue;\n        })\n      }\n      console.log('共' + area.length +'比結果');\n  }\n    if(prevState.loaded){\n      for(let pharmacy of area){ \n        const xhr = new XMLHttpRequest();\n        let url = `https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?address=${pharmacy['機構地址']}&f=json`\n        xhr.open('GET', url, true);\n        xhr.onload = function(){\n          let point = JSON.parse(this.response)['candidates'][0]['location'];\n          let marker = new L.marker(new L.latLng([point.y, point.x]));\n          let popupmsg = `\n          藥局名稱: ${pharmacy['醫事機構名稱']}<br/>\n          地址: ${pharmacy['機構地址']}<br/>\n          醫事機構代碼: ${pharmacy['醫事機構代碼']} <br/>\n          電話: (${pharmacy['電話區域號碼']})-${pharmacy['電話號碼']}<br/>\n          成人口罩總剩餘數: ${pharmacy['成人口罩總剩餘數']}<br/>\n          兒童口罩剩餘數: ${pharmacy['兒童口罩剩餘數']}<br/>\n          來源資料時間: ${pharmacy['來源資料時間']}\n          `\n          marker.bindPopup(popupmsg);\n          prevState.map.addLayer(marker);\n          prevState.makersArr.push(marker);\n        }\n        xhr.send();\n      }\n    }\n    return null;\n }\n\n  loadData(){\n    const xhr = new XMLHttpRequest();\n    const url = \"https://raw.githubusercontent.com/moved0311/get-mask-data/master/output.csv\"\n    var self = this;\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = function(){\n      if(this.readyState === 4 && this.status === 200){\n        self.setState({\n          data : self.csvJSON(this.response),\n          loaded: true\n        });\n      }\n    }\n    xhr.send();\n  }\n  csvJSON(csv){\n    var lines=csv.split(\"\\n\");\n    var result = [];\n    var headers=lines[0].split(\",\");\n    for(var i=1;i<lines.length;i++){\n        var obj = {};\n        var currentline=lines[i].split(\",\");\n        for(var j=0;j<headers.length;j++){\n            obj[headers[j]] = currentline[j];\n        }\n        result.push(obj);\n    }\n    return result; \n  }\n  clickhandler(event){\n    //remove exist marker. \n    for(let marker of this.state.makersArr){\n      this.state.map.removeLayer(marker);\n    }\n\n    console.log('查詢:' + this.inputValue.value);\n    this.setState({inputValue: this.inputValue.value});\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"taiwanmap\"> </div>\n        <div id=\"query\" className=\"leaflet-bar\">\n          <label>\n          鄉鎮別:\n          <input  placeholder=\"大安區\" ref={(c) => this.inputValue = c}></input>\n          <button onClick={this.clickhandler}>查詢</button>\n          </label>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Taiwanmap from './Taiwanmap';\nimport './App.css';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-158033292-1');\nReactGA.pageview(window.location.pathname + window.location.search);\nfunction App() {\n  return (\n    <div id=\"App\" >\n        <Taiwanmap></Taiwanmap>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}